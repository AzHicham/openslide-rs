/* automatically generated by rust-bindgen 0.61.0 */

pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __WORDSIZE: u32 = 64;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 0;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 0;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_64_BIT_INO_T: &[u8; 9usize] = b"$INODE64\0";
pub const __DARWIN_SUF_1050: &[u8; 6usize] = b"$1050\0";
pub const __DARWIN_SUF_EXTSN: &[u8; 14usize] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __has_ptrcheck: u32 = 0;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const OPENSLIDE_PROPERTY_NAME_COMMENT: &[u8; 18usize] = b"openslide.comment\0";
pub const OPENSLIDE_PROPERTY_NAME_VENDOR: &[u8; 17usize] = b"openslide.vendor\0";
pub const OPENSLIDE_PROPERTY_NAME_QUICKHASH1: &[u8; 22usize] = b"openslide.quickhash-1\0";
pub const OPENSLIDE_PROPERTY_NAME_BACKGROUND_COLOR: &[u8; 27usize] =
    b"openslide.background-color\0";
pub const OPENSLIDE_PROPERTY_NAME_OBJECTIVE_POWER: &[u8; 26usize] = b"openslide.objective-power\0";
pub const OPENSLIDE_PROPERTY_NAME_MPP_X: &[u8; 16usize] = b"openslide.mpp-x\0";
pub const OPENSLIDE_PROPERTY_NAME_MPP_Y: &[u8; 16usize] = b"openslide.mpp-y\0";
pub const OPENSLIDE_PROPERTY_NAME_BOUNDS_X: &[u8; 19usize] = b"openslide.bounds-x\0";
pub const OPENSLIDE_PROPERTY_NAME_BOUNDS_Y: &[u8; 19usize] = b"openslide.bounds-y\0";
pub const OPENSLIDE_PROPERTY_NAME_BOUNDS_WIDTH: &[u8; 23usize] = b"openslide.bounds-width\0";
pub const OPENSLIDE_PROPERTY_NAME_BOUNDS_HEIGHT: &[u8; 24usize] = b"openslide.bounds-height\0";
pub type wchar_t = ::std::os::raw::c_int;
pub type max_align_t = u128;
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mbstate_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        128usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__mbstate8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__mbstate8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._mbstateL) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(_mbstateL)
        )
    );
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[test]
fn bindgen_test_layout___darwin_pthread_handler_rec() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_pthread_handler_rec> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_pthread_handler_rec>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_pthread_handler_rec>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__routine) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__arg) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_attr_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_attr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_attr_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_cond_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_cond_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_condattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_condattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_condattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_condattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_mutex_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutexattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_mutexattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutexattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutexattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_once_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_once_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_once_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_once_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlock_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_rwlock_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlock_t>(),
        200usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlockattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_rwlockattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlockattr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_t>(),
        8192usize,
        concat!("Size of: ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cleanup_stack) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__cleanup_stack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__opaque)
        )
    );
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _openslide {
    _unused: [u8; 0],
}
#[doc = " The main OpenSlide type."]
#[doc = ""]
#[doc = " An @ref openslide_t object can be used concurrently from multiple threads"]
#[doc = " without locking.  (But you must lock or otherwise use memory barriers"]
#[doc = " when passing the object between threads.)"]
pub type openslide_t = _openslide;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _openslide_cache {
    _unused: [u8; 0],
}
#[doc = " An OpenSlide tile cache."]
#[doc = ""]
#[doc = " An @ref openslide_cache_t object can be used concurrently from multiple"]
#[doc = " threads without locking.  (But you must lock or otherwise use memory"]
#[doc = " barriers when passing the object between threads.)"]
pub type openslide_cache_t = _openslide_cache;
extern "C" {
    #[doc = " Quickly determine whether a whole slide image is recognized."]
    #[doc = ""]
    #[doc = " If OpenSlide recognizes the file referenced by @p filename, return a"]
    #[doc = " string identifying the slide format vendor.  This is equivalent to the"]
    #[doc = " value of the #OPENSLIDE_PROPERTY_NAME_VENDOR property.  Calling"]
    #[doc = " openslide_open() on this file will return a valid OpenSlide object or"]
    #[doc = " an OpenSlide object in error state."]
    #[doc = ""]
    #[doc = " Otherwise, return NULL.  Calling openslide_open() on this file will also"]
    #[doc = " return NULL."]
    #[doc = ""]
    #[doc = " @param filename The filename to check.  On Windows, this must be in UTF-8."]
    #[doc = " @return An identification of the format vendor for this file, or NULL."]
    #[doc = " @since 3.4.0"]
    pub fn openslide_detect_vendor(
        filename: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Open a whole slide image."]
    #[doc = ""]
    #[doc = " This function can be expensive; avoid calling it unnecessarily.  For"]
    #[doc = " example, a tile server should not call openslide_open() on every tile"]
    #[doc = " request.  Instead, it should maintain a cache of OpenSlide objects and"]
    #[doc = " reuse them when possible."]
    #[doc = ""]
    #[doc = " @param filename The filename to open.  On Windows, this must be in UTF-8."]
    #[doc = " @return"]
    #[doc = "         On success, a new OpenSlide object."]
    #[doc = "         If the file is not recognized by OpenSlide, NULL."]
    #[doc = "         If the file is recognized but an error occurred, an OpenSlide"]
    #[doc = "         object in error state."]
    pub fn openslide_open(filename: *const ::std::os::raw::c_char) -> *mut openslide_t;
}
extern "C" {
    #[doc = " Get the number of levels in the whole slide image."]
    #[doc = ""]
    #[doc = " @param osr The OpenSlide object."]
    #[doc = " @return The number of levels, or -1 if an error occurred."]
    #[doc = " @since 3.3.0"]
    pub fn openslide_get_level_count(osr: *mut openslide_t) -> i32;
}
extern "C" {
    #[doc = " Get the dimensions of level 0 (the largest level). Exactly"]
    #[doc = " equivalent to calling openslide_get_level_dimensions(osr, 0, w, h)."]
    #[doc = ""]
    #[doc = " @param osr The OpenSlide object."]
    #[doc = " @param[out] w The width of the image, or -1 if an error occurred."]
    #[doc = " @param[out] h The height of the image, or -1 if an error occurred."]
    #[doc = " @since 3.3.0"]
    pub fn openslide_get_level0_dimensions(osr: *mut openslide_t, w: *mut i64, h: *mut i64);
}
extern "C" {
    #[doc = " Get the dimensions of a level."]
    #[doc = ""]
    #[doc = " @param osr The OpenSlide object."]
    #[doc = " @param level The desired level."]
    #[doc = " @param[out] w The width of the image, or -1 if an error occurred"]
    #[doc = "               or the level was out of range."]
    #[doc = " @param[out] h The height of the image, or -1 if an error occurred"]
    #[doc = "               or the level was out of range."]
    #[doc = " @since 3.3.0"]
    pub fn openslide_get_level_dimensions(
        osr: *mut openslide_t,
        level: i32,
        w: *mut i64,
        h: *mut i64,
    );
}
extern "C" {
    #[doc = " Get the downsampling factor of a given level."]
    #[doc = ""]
    #[doc = " @param osr The OpenSlide object."]
    #[doc = " @param level The desired level."]
    #[doc = " @return The downsampling factor for this level, or -1.0 if an error occurred"]
    #[doc = "         or the level was out of range."]
    #[doc = " @since 3.3.0"]
    pub fn openslide_get_level_downsample(osr: *mut openslide_t, level: i32) -> f64;
}
extern "C" {
    #[doc = " Get the best level to use for displaying the given downsample."]
    #[doc = ""]
    #[doc = " @param osr The OpenSlide object."]
    #[doc = " @param downsample The downsample factor."]
    #[doc = " @return The level identifier, or -1 if an error occurred."]
    #[doc = " @since 3.3.0"]
    pub fn openslide_get_best_level_for_downsample(osr: *mut openslide_t, downsample: f64) -> i32;
}
extern "C" {
    #[doc = " Copy pre-multiplied ARGB data from a whole slide image."]
    #[doc = ""]
    #[doc = " This function reads and decompresses a region of a whole slide"]
    #[doc = " image into the specified memory location. @p dest must be a valid"]
    #[doc = " pointer to enough memory to hold the region, at least (@p w * @p h * 4)"]
    #[doc = " bytes in length. If an error occurs or has occurred, then the memory"]
    #[doc = " pointed to by @p dest will be cleared."]
    #[doc = ""]
    #[doc = " For more information about processing pre-multiplied pixel data, see"]
    #[doc = " the [OpenSlide website](https://openslide.org/docs/premultiplied-argb/)."]
    #[doc = ""]
    #[doc = " @param osr The OpenSlide object."]
    #[doc = " @param dest The destination buffer for the ARGB data."]
    #[doc = " @param x The top left x-coordinate, in the level 0 reference frame."]
    #[doc = " @param y The top left y-coordinate, in the level 0 reference frame."]
    #[doc = " @param level The desired level."]
    #[doc = " @param w The width of the region. Must be non-negative."]
    #[doc = " @param h The height of the region. Must be non-negative."]
    pub fn openslide_read_region(
        osr: *mut openslide_t,
        dest: *mut u32,
        x: i64,
        y: i64,
        level: i32,
        w: i64,
        h: i64,
    );
}
extern "C" {
    #[doc = " Close an OpenSlide object."]
    #[doc = " No other threads may be using the object."]
    #[doc = " After this function returns, the object cannot be used anymore."]
    #[doc = ""]
    #[doc = " @param osr The OpenSlide object."]
    pub fn openslide_close(osr: *mut openslide_t);
}
extern "C" {
    #[doc = " Get the current error string."]
    #[doc = ""]
    #[doc = " For a given OpenSlide object, once this function returns a non-NULL"]
    #[doc = " value, the only useful operation on the object is to call"]
    #[doc = " openslide_close() to free its resources."]
    #[doc = ""]
    #[doc = " @param osr The OpenSlide object."]
    #[doc = " @return A string describing the original error that caused"]
    #[doc = " the problem, or NULL if no error has occurred."]
    #[doc = " @since 3.2.0"]
    #[doc = ""]
    pub fn openslide_get_error(osr: *mut openslide_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Get the NULL-terminated array of property names."]
    #[doc = ""]
    #[doc = " This function returns an array of strings naming properties available"]
    #[doc = " in the whole slide image."]
    #[doc = ""]
    #[doc = " @param osr The OpenSlide object."]
    #[doc = " @return A NULL-terminated string array of property names, or"]
    #[doc = "         an empty array if an error occurred."]
    pub fn openslide_get_property_names(
        osr: *mut openslide_t,
    ) -> *const *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Get the value of a single property."]
    #[doc = ""]
    #[doc = " This function returns the value of the property given by @p name."]
    #[doc = ""]
    #[doc = " @param osr The OpenSlide object."]
    #[doc = " @param name The name of the desired property. Must be"]
    #[doc = "a valid name as given by openslide_get_property_names()."]
    #[doc = " @return The value of the named property, or NULL if the property"]
    #[doc = "         doesn't exist or an error occurred."]
    pub fn openslide_get_property_value(
        osr: *mut openslide_t,
        name: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Get the NULL-terminated array of associated image names."]
    #[doc = ""]
    #[doc = " This function returns an array of strings naming associated images"]
    #[doc = " available in the whole slide image."]
    #[doc = ""]
    #[doc = " @param osr The OpenSlide object."]
    #[doc = " @return A NULL-terminated string array of associated image names, or"]
    #[doc = "an empty array if an error occurred."]
    pub fn openslide_get_associated_image_names(
        osr: *mut openslide_t,
    ) -> *const *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Get the dimensions of an associated image."]
    #[doc = ""]
    #[doc = " This function returns the width and height of an associated image"]
    #[doc = " associated with a whole slide image. Once the dimensions are known,"]
    #[doc = " use openslide_read_associated_image() to read the image."]
    #[doc = ""]
    #[doc = " @param osr The OpenSlide object."]
    #[doc = " @param name The name of the desired associated image. Must be"]
    #[doc = "            a valid name as given by openslide_get_associated_image_names()."]
    #[doc = " @param[out] w The width of the associated image, or -1 if an error occurred."]
    #[doc = " @param[out] h The height of the associated image, or -1 if an error occurred."]
    pub fn openslide_get_associated_image_dimensions(
        osr: *mut openslide_t,
        name: *const ::std::os::raw::c_char,
        w: *mut i64,
        h: *mut i64,
    );
}
extern "C" {
    #[doc = " Copy pre-multiplied ARGB data from an associated image."]
    #[doc = ""]
    #[doc = " This function reads and decompresses an associated image associated"]
    #[doc = " with a whole slide image. @p dest must be a valid pointer to enough"]
    #[doc = " memory to hold the image, at least (width * height * 4) bytes in"]
    #[doc = " length.  Get the width and height with"]
    #[doc = " openslide_get_associated_image_dimensions(). This function does nothing"]
    #[doc = " if an error occurred."]
    #[doc = ""]
    #[doc = " For more information about processing pre-multiplied pixel data, see"]
    #[doc = " the [OpenSlide website](https://openslide.org/docs/premultiplied-argb/)."]
    #[doc = ""]
    #[doc = " @param osr The OpenSlide object."]
    #[doc = " @param dest The destination buffer for the ARGB data."]
    #[doc = " @param name The name of the desired associated image. Must be"]
    #[doc = "             a valid name as given by openslide_get_associated_image_names()."]
    pub fn openslide_read_associated_image(
        osr: *mut openslide_t,
        name: *const ::std::os::raw::c_char,
        dest: *mut u32,
    );
}
extern "C" {
    #[doc = " Create a new tile cache, unconnected to any OpenSlide object.  The cache"]
    #[doc = " can be attached to one or more OpenSlide objects with openslide_set_cache()."]
    #[doc = " The cache must be released with openslide_cache_release() when done."]
    #[doc = ""]
    #[doc = " @param capacity The capacity of the cache, in bytes."]
    #[doc = " @return A new cache."]
    #[doc = " @since 3.5.0"]
    pub fn openslide_cache_create(capacity: usize) -> *mut openslide_cache_t;
}
extern "C" {
    #[doc = " Attach a cache to the specified OpenSlide object, replacing the"]
    #[doc = " current cache."]
    #[doc = ""]
    #[doc = " @param osr The OpenSlide object."]
    #[doc = " @param cache The cache to attach."]
    #[doc = " @since 3.5.0"]
    pub fn openslide_set_cache(osr: *mut openslide_t, cache: *mut openslide_cache_t);
}
extern "C" {
    #[doc = " Release the cache.  The cache may be released while it is still attached"]
    #[doc = " to OpenSlide objects.  It will be freed once the last attached OpenSlide"]
    #[doc = " object is closed."]
    #[doc = ""]
    #[doc = " @param cache The cache to release."]
    #[doc = " @since 3.5.0"]
    pub fn openslide_cache_release(cache: *mut openslide_cache_t);
}
extern "C" {
    #[doc = " Get the version of the OpenSlide library."]
    #[doc = ""]
    #[doc = " @return A string describing the OpenSlide version."]
    #[doc = " @since 3.3.0"]
    pub fn openslide_get_version() -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Return whether openslide_open() will succeed."]
    #[doc = ""]
    #[doc = " This function returns @p true if openslide_open() will return a valid"]
    #[doc = " @ref openslide_t, or @p false if it will return NULL or an"]
    #[doc = " @ref openslide_t in error state.  As such, there's no reason to use it;"]
    #[doc = " just call openslide_open().  For a less-expensive test that provides"]
    #[doc = " weaker guarantees, see openslide_detect_vendor()."]
    #[doc = ""]
    #[doc = " Before version 3.4.0, this function could be slightly faster than calling"]
    #[doc = " openslide_open(), but it could also erroneously return @p true in some"]
    #[doc = " cases where openslide_open() would fail."]
    #[doc = ""]
    #[doc = " @param filename The filename to check.  On Windows, this must be in UTF-8."]
    #[doc = " @return If openslide_open() will succeed."]
    #[doc = " @deprecated Use openslide_detect_vendor() to efficiently check whether"]
    #[doc = "             a slide file is recognized by OpenSlide, or just call"]
    #[doc = "             openslide_open()."]
    pub fn openslide_can_open(filename: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    #[doc = " Get the number of levels in the whole slide image."]
    #[doc = ""]
    #[doc = " @param osr The OpenSlide object."]
    #[doc = " @return The number of levels, or -1 if an error occurred."]
    #[doc = " @deprecated Use openslide_get_level_count() instead."]
    pub fn openslide_get_layer_count(osr: *mut openslide_t) -> i32;
}
extern "C" {
    #[doc = " Get the dimensions of level 0 (the largest level). Exactly"]
    #[doc = " equivalent to calling openslide_get_level_dimensions(osr, 0, w, h)."]
    #[doc = ""]
    #[doc = " @param osr The OpenSlide object."]
    #[doc = " @param[out] w The width of the image, or -1 if an error occurred."]
    #[doc = " @param[out] h The height of the image, or -1 if an error occurred."]
    #[doc = " @deprecated Use openslide_get_level0_dimensions() instead."]
    pub fn openslide_get_layer0_dimensions(osr: *mut openslide_t, w: *mut i64, h: *mut i64);
}
extern "C" {
    #[doc = " Get the dimensions of a level."]
    #[doc = ""]
    #[doc = " @param osr The OpenSlide object."]
    #[doc = " @param level The desired level."]
    #[doc = " @param[out] w The width of the image, or -1 if an error occurred"]
    #[doc = "               or the level was out of range."]
    #[doc = " @param[out] h The height of the image, or -1 if an error occurred"]
    #[doc = "               or the level was out of range."]
    #[doc = " @deprecated Use openslide_get_level_dimensions() instead."]
    pub fn openslide_get_layer_dimensions(
        osr: *mut openslide_t,
        level: i32,
        w: *mut i64,
        h: *mut i64,
    );
}
extern "C" {
    #[doc = " Get the downsampling factor of a given level."]
    #[doc = ""]
    #[doc = " @param osr The OpenSlide object."]
    #[doc = " @param level The desired level."]
    #[doc = " @return The downsampling factor for this level, or -1.0 if an error occurred"]
    #[doc = "         or the level was out of range."]
    #[doc = " @deprecated Use openslide_get_level_downsample() instead."]
    pub fn openslide_get_layer_downsample(osr: *mut openslide_t, level: i32) -> f64;
}
extern "C" {
    #[doc = " Get the best level to use for displaying the given downsample."]
    #[doc = ""]
    #[doc = " @param osr The OpenSlide object."]
    #[doc = " @param downsample The downsample factor."]
    #[doc = " @return The level identifier, or -1 if an error occurred."]
    #[doc = " @deprecated Use openslide_get_best_level_for_downsample() instead."]
    pub fn openslide_get_best_layer_for_downsample(osr: *mut openslide_t, downsample: f64) -> i32;
}
extern "C" {
    #[doc = " Get the comment (if any) for this image. Exactly equivalent to calling"]
    #[doc = " openslide_get_property_value() with #OPENSLIDE_PROPERTY_NAME_COMMENT."]
    #[doc = ""]
    #[doc = " @param osr The OpenSlide object."]
    #[doc = " @return The comment for this image, or NULL if an error occurred."]
    #[doc = " @deprecated Call openslide_get_property_value() with"]
    #[doc = "             #OPENSLIDE_PROPERTY_NAME_COMMENT instead."]
    pub fn openslide_get_comment(osr: *mut openslide_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn _openslide_give_prefetch_hint_UNIMPLEMENTED() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _openslide_cancel_prefetch_hint_UNIMPLEMENTED();
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    const UNINIT: ::std::mem::MaybeUninit<__va_list_tag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gp_offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fp_offset) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).overflow_arg_area) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reg_save_area) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
